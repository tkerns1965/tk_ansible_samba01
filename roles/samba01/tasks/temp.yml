

    - name: Join the domain
      vars:
        passwd_response:
          - key: "(?i)password for {{ realm_user }}:"
            value: "{{ realm_passwd }}"
      expect:
        command: realm join --user={{ realm_user }} --computer-ou={{ realm_ou }} {{ realm_domain }} --install=/
        responses: "{{ passwd_response | items2dict }}"
      when: chkdomain_result.stdout != realm_domain

    - name: Unset sssd configuration settings
      lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: "{{ item }}"
        line: '# \1'
        backrefs: yes
      with_items:
        - '^(ldap_id_mapping = False)$'
        - '^(use_fully_qualified_names = True)$'
      register: unsetsssd_result

    - name: Reset sssd configuration settings
      lineinfile:
        path: /etc/sssd/sssd.conf
        insertafter: "{{ item.insertafter }}"
        line: "{{ item.line }}"
      with_items:
        - insertafter: '^# ldap_id_mapping = False$'
          line: ldap_id_mapping = True
        - insertafter: '^# use_fully_qualified_names = True$'
          line: use_fully_qualified_names = False
        - insertafter: '^access_provider = ad$'
          line: ldap_user_ssh_public_key = altSecurityIdentities
      register: resetsssd_result

    - name: Restart sssd
      command: systemctl restart sssd.service
      when: (unsetsssd_result is changed) or (resetsssd_result is changed)

    - name: Create share directory
      file:
        path: /samba/share/
        owner: root
        group: sambashare
        mode: '2775'
        state: directory

    - name: Create smb.conf
      template:
        src: smb.conf
        dest: /etc/samba/smb.conf
        backup: yes
      register: smbconf_result

    - name: Restart smbd
      command: systemctl restart smbd.service nmbd.service
      when: smbconf_result is changed
