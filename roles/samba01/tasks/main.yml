---
- name: Include private variables
  include_vars: private.yml

- name: Execute block as sudo
  become: yes
  block:
    - name: Allow change of hostname
      lineinfile:
        path: /etc/cloud/cloud.cfg
        regexp: '^(?P<a>preserve_hostname: )false$'
        line: '\g<a>true'
        backrefs: yes

    - name: "Set hostname to {{ samba_hostname }}.{{ samba_domain }}"
      hostname:
        name: "{{ samba_hostname }}.{{ samba_domain }}"

    - name: Install packages
      apt:
        name="{{ sambasvr_packages }}"
        state=latest

    - name: Set kerberos options
      blockinfile:
        path: /etc/krb5.conf
        insertafter: '^\s*default_realm = {{ krb5_default_realm }}$'
        block: |
          #
                  dns_lookup_kdc = true
                  dns_lookup_realm = true
          #

    - name: Set NTP server
      blockinfile:
        path: /etc/systemd/timesyncd.conf
        insertafter: '^#NTP=$'
        block: |
          #
          "NTP={{ timesyncd_ntpsvr }}"
          #
      register: ntpsvr_result
      ignore_errors: True

    - name: Enable NTP
      command: "{{ item }}"
      when: ntpsvr_result is changed
      with_items:
        - timedatectl set-ntp true
        - systemctl restart systemd-timesyncd.service
        - timedatectl --adjust-system-clock

    - name: Create realmd.conf
      template:
        src: realmd.conf
        dest: /etc/

    - name: Check PAM configuration
      command: awk '/mkhomedir/ { print $3 }' /etc/pam.d/common-session
      register: chkpam_result
      changed_when: False

    - name: Update PAM configuration
      command: pam-auth-update --enable mkhomedir
      when: '"pam_mkhomedir.so" not in chkpam_result.stdout'

    - name: Check for domain
      command: realm list --name-only
      register: chkdomain_result
      changed_when: False

    - name: Join the domain
      vars:
        passwd_response:
          - key: "(?i)password for {{ realm_user }}:"
            value: "{{ realm_passwd }}"
      expect:
        command: realm join --user={{ realm_user }} --computer-ou={{ realm_ou }} {{ realm_domain }} --install=/
        responses: "{{ passwd_response | items2dict }}"
      when: realm_domain not in chkdomain_result.stdout_lines

    - name: Unset sssd configuration settings
      lineinfile:
        path: /etc/sssd/sssd.conf
        regexp: "{{ item }}"
        line: '# \1'
        backrefs: yes
      with_items:
        - '^(ldap_id_mapping = False)$'
        - '^(use_fully_qualified_names = True)$'
      register: unsetsssd_result

    - name: Reset sssd configuration settings
      lineinfile:
        path: /etc/sssd/sssd.conf
        insertafter: "{{ item.insertafter }}"
        line: "{{ item.line }}"
      with_items:
        - insertafter: '^# ldap_id_mapping = False$'
          line: ldap_id_mapping = True
        - insertafter: '^# use_fully_qualified_names = True$'
          line: use_fully_qualified_names = False
        - insertafter: '^access_provider = ad$'
          line: ldap_user_ssh_public_key = altSecurityIdentities
      register: resetsssd_result

    - name: Restart sssd
      command: systemctl restart sssd.service
      when: (unsetsssd_result is changed) or (resetsssd_result is changed)

    - name: Create user.map
      template:
        src: user.map
        dest: /usr/local/samba/etc/

    - name: Create samba folder
      file:
        path: /samba/
        # owner: root
        # group: root
        mode: '0755'
        state: directory

    - name: Create shared folders
      file:
        path: "{{ item }}"
        # owner: root
        group: sambashare
        mode: '2770'
        state: directory
      with_items: "{{ share_names }}"

    - name: Set ACLs for shared folders
      acl:
        path: "{{ item.path }}"
        entity: "{{ item.entity }}"
        etype: "{{ item.etype }}"
        permissions: "{{ item.permissions }}"
        default: "{{ item.default }}"
        state: present
      with_items: "{{ share_acls }}"

    - name: Create smb.conf
      template:
        src: smb.conf
        dest: /etc/samba/
        backup: yes
      register: smbconf_result

    - name: Restart smbd
      command: systemctl restart smbd.service nmbd.service
      when: smbconf_result is changed
